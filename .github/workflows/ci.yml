name: Check & Release

on:
  push:
    branches:
      - main
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

jobs:
  package:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.package_details.outputs.name }}
      version: ${{ steps.package_details.outputs.version }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Get Package details
        id: package_details
        shell: bash
        run: |
          echo "name=$(jq -r .name info.json)" >> $GITHUB_OUTPUT
          echo "version=$(jq -r .version info.json)" >> $GITHUB_OUTPUT

      - name: Create Package
        shell: bash
        run: |
          mkdir -p build
          tar c \
            --transform 's|./|${{ steps.package_details.outputs.name }}-${{ steps.package_details.outputs.version }}/|' \
            --exclude '.git' --exclude '.github' --exclude 'dist' --exclude 'build' \
            --exclude 'tools' \
            . | tar x -C build/
          
          mkdir -p dist
          (
            cd build; zip -r \
              ../dist/${{ steps.package_details.outputs.name }}-${{ steps.package_details.outputs.version }}.zip \
              ${{ steps.package_details.outputs.name }}-${{ steps.package_details.outputs.version }}/
          )

      - name: Upload artifact
        uses: actions/upload-artifact@v4.0.0
        with:
          name: Package
          if-no-files-found: error
          path: dist/

  release-github:
    runs-on: ubuntu-latest
    needs: [package]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download the executable
        uses: actions/download-artifact@v4
        with:
          name: Package
          path: dist/
      
      - name: Create GitHub release
        uses: Roang-zero1/github-create-release-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPDATE_EXISTING: "true"
          VERSION_REGEX: ^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+
      
      - name: Upload GitHub artifacts
        uses: Roang-zero1/github-upload-release-artifacts-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: dist/

  release-modportal:
    runs-on: ubuntu-latest
    needs: [package]
    # if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download the executable
        uses: actions/download-artifact@v4
        with:
          name: Package
          path: dist/

      - name: Install requests
        run: python -m pip install requests

      - name: Factorio release
        uses: henriquegemignani/factorio-mod-uploader@main
        with:
          zip_file: "dist/${{ needs.package.outputs.name }}-${{ needs.package.outputs.version }}.zip"
          api_key: "${{ secrets.FACTORIO_API_KEY }}"
        
          # run: |
        #   import sys
        #   import requests
        #   from os import getenv

        #   MOD_PORTAL_URL = "https://mods.factorio.com"
        #   INIT_UPLOAD_URL = f"{MOD_PORTAL_URL}/api/v2/mods/releases/init_upload"

        #   apikey = getenv("MOD_UPLOAD_API_KEY")
        #   modname = getenv("MOD_UPLOAD_NAME")
        #   zipfilepath = getenv("MOD_UPLOAD_FILE")

        #   request_body = data={"mod":modname}
        #   request_headers = {"Authorization": f"Bearer {apikey}"}

        #   response = requests.post(
        #     INIT_UPLOAD_URL,
        #     data=request_body,
        #     headers=request_headers)

        #   if not response.ok:	
        #     print(f"init_upload failed: {response.text}")
        #     sys.exit(1)

        #   upload_url = response.json()["upload_url"]

        #   with open(zipfilepath, "rb") as f:	
        #     request_body = {"file": f}	
        #     response = requests.post(upload_url, files=request_body)

        #   if not response.ok:	
        #     print(f"upload failed: {response.text}")	
        #     sys.exit(1)

        #   print(f"upload successful: {response.text}")
        # shell: python {0}
        # env:
        #   MOD_UPLOAD_NAME: "${{ needs.package.outputs.name }}"
        #   MOD_UPLOAD_FILE: "dist/${{ needs.package.outputs.name }}-${{ needs.package.outputs.version }}.zip"
        #   MOD_UPLOAD_API_KEY: "${{ secrets.FACTORIO_API_KEY }}"

